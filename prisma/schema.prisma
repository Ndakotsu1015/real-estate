// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Property {
  id              Int              @id @default(autoincrement())
  uid             String           @unique @default(cuid())
  image           String
  address         String
  type            String
  size            Float
  price           Float
  transactions    Transaction[]
  Lga             Lga?             @relation(fields: [lgaId], references: [id])
  lgaId           Int?
  // Add other fields as needed
  LeaseAgreement  LeaseAgreement[]
  User            User?            @relation(fields: [userId], references: [id])
  userId          Int?
  State           State?           @relation(fields: [stateId], references: [id])
  stateId         Int?
  PropertyOwner   PropertyOwner?   @relation(fields: [propertyOwnerId], references: [id])
  propertyOwnerId Int?
}

model Client {
  id             Int              @id @default(autoincrement())
  uid            String           @unique @default(cuid())
  name           String
  contactInfo    String
  preferences    String
  leaseAgreement LeaseAgreement[]
  // Add other fields as needed
}

model Transaction {
  id         Int      @id @default(autoincrement())
  uid        String   @unique @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  amount     Float
  date       DateTime
  // Add other fields as needed
}

model LeaseAgreement {
  id         Int      @id @default(autoincrement())
  uid        String   @unique @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  startDate  DateTime
  endDate    DateTime
  terms      Term[]
  // Add other fields as needed
}

model Term {
  id               Int             @id @default(autoincrement())
  uid              String          @unique @default(cuid())
  terms            String
  LeaseAgreement   LeaseAgreement? @relation(fields: [leaseAgreementId], references: [id])
  leaseAgreementId Int?
}

model User {
  id               Int               @id @default(autoincrement())
  uid              String            @unique @default(cuid())
  status           Boolean           @default(true)
  phoneNumber      String
  username         String
  email            String            @unique
  password         String
  role             Role
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  properties       Property[]
  // Add other fields as needed
  LoginCredenatial LoginCredenatial?
}

model LoginCredenatial {
  id     Int    @id @default(autoincrement())
  uid    String @unique @default(cuid())
  token  String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique()
}

model State {
  id       Int        @id @default(autoincrement())
  name     String
  lgas     Lga[]
  Property Property[]
}

model Lga {
  id       Int        @id @default(autoincrement())
  name     String
  State    State?     @relation(fields: [stateId], references: [id])
  stateId  Int?
  Property Property[]
}

model PropertyOwner {
  id       Int        @id @default(autoincrement())
  uid      String     @unique @default(cuid())
  name     String
  property Property[]
}

enum Role {
  SUPERADMIN
  ADMIN
  AGENT
  PROPERTYOWNER
  CLEINT
}

enum PropertyType {
  APARTMENT
  LAND
}
